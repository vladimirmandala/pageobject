bq. *NOTE: Currently just a DRAFT. I need to verify with Jeff Morgan if I am doing things properly.*

h1. Pageobject

This application was generated with the "rails_apps_composer":https://github.com/RailsApps/rails_apps_composer gem provided by the "RailsApps Project":http://railsapps.github.io/.

Its purpose is to demonstrate how to configure and use Jeff Morgan's (aka, Cheezy) "PageObject gem":https://github.com/cheezy/page-object

h2. Getting Started with PageObject

h3. Configuration

* Add the following to @Gemfile@

bc. group :test do
  gem 'page-object'
  gem 'cucumber-rails', :require => false
  gem 'rspec-rails'
  gem 'database_cleaner'
  gem 'selenium-webdriver'
end

* Add the following to @features/support/env.rb@

bc. require 'selenium-webdriver'
require 'page-object'
require 'cucumber/rails'

* And at the end of @features/support/env.rb@

bc.. World(PageObject::PageFactory)
Before do
  @browser = Selenium::WebDriver.for :firefox
end

After do
  @browser.close
end

h3. Page Objects

You can model your page by creating a class, and including PageObject module.

Check out @features/support/product_page.rb@

bc.. class ProductPage
  include PageObject

  page_url('http://localhost:3000/products/new')

  text_field(:title, :id => 'product_title')
  text_field(:description, :id => 'product_description')
  text_field(:price, :id => 'product_price')
  button(:create_product, :name => 'commit')
end

p. You simply create representations of the aspects of the page that you wish to interact with. For example,
if it is a form, you will likely want to create feature files to exercise filling in the form.

h2. Using PageObjects in Steps

You can see the simple feature in @features/product.feature@

bc.. Feature: Products are key to our success.
  We need to be able to manage our product data.

  Scenario: Create a new product
    Given We wish to enter a new product
    When The following product is entered
      | title       | Product A       |
      | description | A great product |
    Then I should see the product listed
      | title       | Product A       |
      | description | A great product |

h3. Navigation

p. And the Given is where we will want to use the new @PageObject@ to navigate to the page.

bc.. Given(/^We wish to enter a new product$/) do
  @product_page = ProductPage.new(@browser)
  visit_page ProductPage
  #click_link 'New Product'
end

p. The @visit_page@ method uses the @page_url@ method inside the @PageObject@

h3. Setting Values

The @When@ step is going to fill in the form using the PageObject:

bc.. When(/^The following product is entered$/) do |table|
  data = table.rows_hash
  @product_page.title = data['title']
  @product_page.description = data['description']
  @product_page.create_product
end

h3. Asserting Expected Results

The @Then@ is where we will use the PageObject to check for results.

bc.. Then(/^I should see the product listed$/) do |table|
  data = table.rows_hash
  @product_page.text.should have_content('Product was successfully created')
  @product_page.text.should have_content(data['title'])
  @product_page.text.should have_content(data['description'])
end

h2. Ruby on Rails

This application requires:

* Ruby version 2.0.0
* Rails version 4.0.0

Learn more about "Installing Rails":http://railsapps.github.io/installing-rails.html.

h2. Database

This application uses SQLite with ActiveRecord.

h2. Development

* Template Engine: Haml
* Testing Framework: Test::Unit
* Front-end Framework: Twitter Bootstrap (Sass)
* Form Builder: SimpleForm
* Authentication: None
* Authorization: None

h2. Contributing

If you make improvements to this application, please share with others.

* Fork the project on GitHub.
* Make your feature addition or bug fix.
* Commit with Git.
* Send the author a pull request.

If you add functionality to this application, create an alternative implementation, or build an application that is similar, please contact me and I'll add a note to the README so that others can find your work.

h2. Credits

Cheezy

h2. License

Enjoy
